export REPO_ROOT=`dirname "$0"`/
pushd "$REPO_ROOT" > /dev/null
export REPO_ROOT=`pwd`/

if [ -f "${REPO_ROOT}config.rb" -o -f "${REPO_ROOT}config.sh" -o -f "${REPO_ROOT}bootstrap.sh" ]; then

    echo ""
    echo "Re-running set.sh will overwrite config.sh, config.rb, bootstrap.sh and others."
    echo "Any manual modifications to these files will be destroyed."
    echo ""
    echo "Are you really sure (Y/N)?"

    read -r confirm

    if [ "${confirm}" != "Y" ]; then
        exit
    fi
fi

preamble="#\n# This file is generated by setup.sh from a template and config.txt.\n# It is OK to edit it, but it will be overwritten if/when you re-run setup.sh\n#"

if [ -f "${REPO_ROOT}.vagrant/machines/default/virtualbox/id" ]; then
    echo "This copy of the repository has already been configured and set up for VirtualBox. Run vagrant ssh or vagrant up"
    exit
fi

chain=""
HOSTLIST=""
CERTLIST=""
SERVERLIST=""
while read -r configLine; do 
    # Trim spaces
    configLine=`echo "${configLine}" | sed 's/(^ *| *$)//g'`
    if [ "${configLine}" != "" ]; then
        # Drop # comment lines
        firstChar=`echo "${configLine}" | cut -c1`
        if [ "${firstChar}" != "#" ]; then

            # Split in keyword and value. Trim spaces from
            # keyword and value and remove optional double quotes

            keyword=`echo "${configLine}" | sed 's/=.*$//g'`            
            keyword=`echo "${keyword}" | sed 's/(^ *| *$)//g'`

            value=`echo "${configLine}" | sed 's/^.*=//g'`
            value=`echo "${value}" | sed 's/(^ *| *$)//g'`
            value=`echo "${value}" | sed 's/^"\(.*\)"$/\1/g'`
            value=`echo "${value}" | sed 's/([\/\\])/\\\1/g'`

            # Will replace !!keyword (e.g. !!PROVIDER) with value
            # in template files

            cmd="sed \"s/!!${keyword}/${value}/g\""
            if [ "${chain}" == "" ]; then
                chain=${cmd}
            else
                chain="${chain} | ${cmd}"
            fi

            if [ "${keyword}" == "ADDITIONAL_DOMAINLIST" ]; then

                DOMAINLIST="${MAIN_DOMAIN}"

                if [ "${value}" != "" ]; then
                    DOMAINLIST="${DOMAINLIST},${value}"
                fi

                for domain in $(echo "${DOMAINLIST}" | sed 's/,/\n/g'); do

                    if [ "${domain}" == "${MAIN_DOMAIN}" ]; then
                        SERVERTYPE="Wordpress"
                        DOCKERNAME="${MAIN_DOCKER_NAME}"
                    else
                        DOCKERNAME=`find "${REPO_ROOT}vagrant/serverport/${domain}" -depth 1 -type f -regex ".*/[^\.][^/]*\.sh" -exec basename {} \; | head -1 | sed 's/^\(.*\)\.sh$/\1/g'`
                        if [ -f "${REPO_ROOT}vagrant/serverport/${domain}/wp-content.tgz" ]; then
                            SERVERTYPE="Wordpress"
                        else
                            SERVERTYPE="Httpd"
                        fi
                    fi

                    if [ "${HOSTLIST}" == "" ]; then
                        HOSTLIST="\\\${IPV4_ADDR} $domain"
                        CERTLIST="${domain},*.${domain}"
                        SERVERLIST="\\\"${SERVERTYPE},${domain},${DOCKERNAME}\\\""
                    else
                        HOSTLIST="${HOSTLIST}\n\\\${IPV4_ADDR} $domain"
                        CERTLIST="${CERTLIST},${domain},*.${domain}"
                        SERVERLIST="${SERVERLIST} \\\"${SERVERTYPE},${domain},${DOCKERNAME}\\\""
                    fi
                done                

                cmd="sed \"s/!!HOSTLIST/${HOSTLIST}/g\""
                chain="${chain} | ${cmd}"

                cmd="sed \"s/!!CERTLIST/${CERTLIST}/g\""
                chain="${chain} | ${cmd}"

                cmd="sed \"s/!!SERVERLIST/${SERVERLIST}/g\""
                chain="${chain} | ${cmd}"
            fi

            declare "${keyword}=${value}"
        fi
    fi
done < ${REPO_ROOT}config.txt


if [ ! -d "${REPO_ROOT}ssh" ]; then
    mkdir "${REPO_ROOT}ssh"
fi

if [ ! -d "${REPO_ROOT}vagrant" ]; then
    mkdir "${REPO_ROOT}vagrant"
fi

if [ ! -d "${REPO_ROOT}vagrant/scripts" ]; then
    mkdir "${REPO_ROOT}vagrant/scripts"
fi

if [ ! -d "${REPO_ROOT}vagrant/serverport" ]; then
    mkdir "${REPO_ROOT}vagrant/serverport"
fi

curl -s https://www.cloudflare.com/ips-v4 > "${REPO_ROOT}vagrant/serverport/cloudflare-ipv4.txt" 

CLOUDFLARE_IPV4=""
NGINX_CLOUDFLARE_IPV4=""
while read -r configLine; do 
    if [ "${configLine}" != "" ]; then
        if [ "${CLOUDFLARE_IPV4}" == "" ]; then
            CLOUDFLARE_IPV4="${configLine}"
            NGINX_CLOUDFLARE_IPV4="set_real_ip_from ${configLine};"
        else
            CLOUDFLARE_IPV4="${CLOUDFLARE_IPV4} ${configLine}"
            NGINX_CLOUDFLARE_IPV4="${NGINX_CLOUDFLARE_IPV4} set_real_ip_from ${configLine};"
        fi
    fi
done < "${REPO_ROOT}vagrant/serverport/cloudflare-ipv4.txt"

cmd="sed \"s|!!CLOUDFLARE_IPV4|${CLOUDFLARE_IPV4}|g\""
chain="${chain} | ${cmd}"

cmd="sed \"s|!!NGINX_CLOUDFLARE_IPV4|${NGINX_CLOUDFLARE_IPV4}|g\""
chain="${chain} | ${cmd}"

curl -s https://www.cloudflare.com/ips-v6 > "${REPO_ROOT}vagrant/serverport/cloudflare-ipv6.txt" 

CLOUDFLARE_IPV6=""
NGINX_CLOUDFLARE_IPV6=""
while read -r configLine; do 
    if [ "${configLine}" != "" ]; then
        if [ "${CLOUDFLARE_IPV6}" == "" ]; then
            CLOUDFLARE_IPV6="${configLine}"
            NGINX_CLOUDFLARE_IPV6="set_real_ip_from ${configLine};"
        else
            CLOUDFLARE_IPV6="${CLOUDFLARE_IPV6} ${configLine}"
            NGINX_CLOUDFLARE_IPV6="${NGINX_CLOUDFLARE_IPV6} set_real_ip_from ${configLine}\\;"
        fi
    fi
done < "${REPO_ROOT}vagrant/serverport/cloudflare-ipv6.txt"

cmd="sed \"s|!!CLOUDFLARE_IPV6|${CLOUDFLARE_IPV6}|g\""
chain="${chain} | ${cmd}"

cmd="sed \"s|!!NGINX_CLOUDFLARE_IPV6|${NGINX_CLOUDFLARE_IPV6}|g\""
chain="${chain} | ${cmd}"

echo "${preamble}" > ${REPO_ROOT}config.rb
cat "${REPO_ROOT}templates/config.rb" | bash -c "${chain}" >> "${REPO_ROOT}config.rb"

echo "${preamble}" > ${REPO_ROOT}config.sh
cat "${REPO_ROOT}templates/config.sh" | bash -c "${chain}" >> "${REPO_ROOT}config.sh"

echo "${preamble}" > ${REPO_ROOT}Vagrantfile
cat "${REPO_ROOT}templates/Vagrantfile.${PROVIDER}" | bash -c "${chain}" >> "${REPO_ROOT}Vagrantfile"

echo "#!/usr/bin/env bash" > ${REPO_ROOT}bootstrap.sh
cat "./config.sh" >> ${REPO_ROOT}bootstrap.sh
cat templates/bootstrap.sh | bash -c "${chain}" >> ${REPO_ROOT}bootstrap.sh

cd "${REPO_ROOT}templates/vagrant/scripts" 
find . -depth 1 -type f -regex ".*/[^\.][^/]*" -exec basename {} \; | while read scriptFile; do
    cat ${scriptFile} |  bash -c "${chain}" > "${REPO_ROOT}vagrant/scripts/${scriptFile}"   
done
chmod +x "${REPO_ROOT}vagrant/scripts/"*.sh

if [ ! -e "${REPO_ROOT}vagrant/serverport" ]; then
    mkdir "${REPO_ROOT}vagrant/serverport"
fi

if [ ! -e "${REPO_ROOT}vagrant/serverport/${MAIN_DOMAIN}" ]; then
    mkdir "${REPO_ROOT}vagrant/serverport/${MAIN_DOMAIN}"
fi

cat "${REPO_ROOT}templates/!!MAIN_DOMAIN/!!MAIN_DOCKER_NAME.sh" | bash -c "${chain}" > "${REPO_ROOT}vagrant/serverport/${MAIN_DOMAIN}/${MAIN_DOCKER_NAME}.sh"
chmod +x "${REPO_ROOT}vagrant/serverport/${MAIN_DOMAIN}/${MAIN_DOCKER_NAME}.sh"

if [ ! -f "${REPO_ROOT}ssh/${PRIVATE_KEY_FILE}" ]; then
    echo "${REPO_ROOT}ssh/${PRIVATE_KEY_FILE} does not exist. Running ssh-keygen to create it."
    ssh-keygen -t ed25519 -f "${REPO_ROOT}ssh/${PRIVATE_KEY_FILE}"
fi

cp "${REPO_ROOT}ssh/${PRIVATE_KEY_FILE}.pub" "${REPO_ROOT}vagrant/${PRIVATE_KEY_FILE}.pub"

echo "Setup complete. Now run 'vagrant up' to set up the virtual machine"